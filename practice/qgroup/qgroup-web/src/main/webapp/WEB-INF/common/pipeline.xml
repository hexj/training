<?xml version="1.0" encoding="UTF-8" ?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:services="http://www.alibaba.com/schema/services"
             xmlns:pl-conditions="http://www.alibaba.com/schema/services/pipeline/conditions"
             xmlns:pl-valves="http://www.alibaba.com/schema/services/pipeline/valves"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:p="http://www.springframework.org/schema/p"
             xsi:schemaLocation="
        http://www.alibaba.com/schema/services http://localhost:8080/schema/services.xsd
        http://www.alibaba.com/schema/services/pipeline/conditions http://localhost:8080/schema/services-pipeline-conditions.xsd
        http://www.alibaba.com/schema/services/pipeline/valves http://localhost:8080/schema/services-pipeline-valves.xsd
        http://www.springframework.org/schema/beans http://localhost:8080/schema/www.springframework.org/schema/beans/spring-beans.xsd
    ">

    <services:pipeline xmlns="http://www.alibaba.com/schema/services/pipeline/valves">

        <!-- 初始化turbine rundata，并在pipelineContext中设置可能会用到的对象(如rundata、utils)，以便valve取得。 -->
        <prepareForTurbine/>

        <!-- 预备webx所需的对象。 -->
        <!--<prepareForWebx2 />-->

        <!-- 设置日志系统的上下文，支持把当前请求的详情打印在日志中。 -->
        <setLoggingContext/>

        <!-- 分析URL，取得target。 -->
        <analyzeURL/>

        <!--
              检查csrf-token，防止csrf攻击和重复提交。假如request和session中的token不匹配，则出错，或显示expired页面。
              这里需要注意:因为我们淘宝的安全包的算法和webx3的不同,如果是新项目,使用webx3的form,需要使用淘宝安全包的算法,那么需要使用下面的valve
                  <valve class="com.taobao.security.webx3.pipeline.TBCheckCsrfTokenValve" p:tokenKey="_tb_token_"/>
                         已经打到了安全包里面了
          -->
        <!-- 检查csrf token，防止csrf攻击和重复提交。假如request和session中的token不匹配，则出错，或显示expired页面。 -->
        <TBCheckCsrfToken expiredPage="http://err.taobao.com/error2.html"/>
        <try-catch-finally>
            <try>
                <valve class="com.alibaba.alimonitor.jmonitor.plugin.webx3.JmonitorWebxUrlValve" />
                <valve class="com.taobao.cun.admin.web.webx.valve.SecurityCheckValve">
                    <beans:property name="unProtectedURLs">
                        <beans:set>
                            <beans:value>/checkUrl.htm</beans:value>
                            <beans:value>/checkpreload.htm</beans:value>
                            <beans:value>/alipay/acquire/receive_createandpay_notify.json</beans:value>
                        </beans:set>
                    </beans:property>
                </valve>
                <valve class="com.taobao.cun.admin.web.webx.valve.RequestSourceCheckValve">
                    <beans:property name="requiredResourceTypes" value="json,jsonp"/>
                    <beans:property name="checkHost" value="${cuntao.web.requestSourceCheck.checkHost}"/>
                    <beans:property name="checkReferer" value="${cuntao.web.requestSourceCheck.checkReferer}"/>
                    <beans:property name="allowedDomains" value="${cuntao.web.requestSourceCheck.allowedDomains}"/>
                    <beans:property name="unProtectedURLs">
                        <beans:set>
                            <beans:value>/alipay/customerSign/receive_return.json</beans:value>
                            <beans:value>/alipay/acquire/receive_createandpay_notify.json</beans:value>
                        </beans:set>
                    </beans:property>
                </valve>
                <loop>
                    <choose>
                        <when>
                            <!-- 执行带模板的screen，默认有layout。 -->
                            <pl-conditions:target-extension-condition extension="null,vm,htm,html"/>
                            <performAction/>
                            <performTemplateScreen/>
                            <renderTemplate/>
                        </when>
                        <when>
                            <pl-conditions:target-extension-condition extension="json,jsonp,xml,xhtml"/>
                            <valve class="com.alibaba.citrus.extension.rpc.integration.RPCServiceHandlerValve"/>
                        </when>
                        <when>
                            <!-- 执行不带模板的screen，无layout。 -->
                            <pl-conditions:target-extension-condition extension="do"/>
                            <performAction/>
                            <performScreen/>
                        </when>
                        <otherwise>
                            <!-- 将控制交还给servlet engine。 -->
                            <exit/>
                        </otherwise>
                    </choose>
                    <!-- 假如rundata.setRedirectTarget()被设置，则循环，否则退出循环。 -->
                    <breakUnlessTargetRedirected/>
                </loop>
            </try>
            <catch>
                <valve class="com.taobao.cun.admin.web.webx.valve.ExceptionHandleValve"/>
                <valve class="com.alibaba.alimonitor.jmonitor.plugin.webx3.JmonitorWebxUrlExceptionValve" />
                <performTemplateScreen/>
                <renderTemplate/>
            </catch>
            <finally>
                <valve class="com.alibaba.alimonitor.jmonitor.plugin.webx3.JmonitorWebxUrlFinallyValve"/>
            </finally>
        </try-catch-finally>
    </services:pipeline>

</beans:beans>